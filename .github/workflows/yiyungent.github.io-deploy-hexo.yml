name: yiyungent.github.io - Build and Deploy Hexo

on:
  workflow_dispatch: # Run workflow manually (without waiting for the cron to be called), through the Github Actions Workflow page directly
  # schedule: # Run workflow automatically
    # - cron: "0 * * * *" # ÊØè 1 h ËøêË°å‰∏ÄÊ¨°

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout üõéÔ∏è
      uses: actions/checkout@master
      with:
        # Repository name with owner. For example, actions/checkout
        # Default: ${{ github.repository }}
        repository: 'yiyungent/yiyungent.github.io'
        # The branch, tag or SHA to checkout. When checking out the repository that
        # triggered a workflow, this defaults to the reference or SHA for that event.
        # Otherwise, uses the default branch.
        ref: 'master'
        # Personal access token (PAT) used to fetch the repository. The PAT is configured
        # with the local git config, which enables your scripts to run authenticated git
        # commands. The post-job step removes the PAT.
        #
        # We recommend using a service account with the least permissions necessary. Also
        # when generating a new PAT, select the least scopes necessary.
        #
        # [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
        #
        # Default: ${{ github.token }}
        token: ${{ secrets.MY_GITHUB_TOKEN_ACTIONS }}
        # ‰∏∫‰∫ÜËÆ© git ÊúâÊó•Âøó (git log) ÂèØÂØªÔºåËøòÂæóÂú®Ê£ÄÂá∫ÁöÑÊó∂ÂÄôÈ°∫Â∏¶ÊääÊâÄÊúâÊèê‰∫§ÂéÜÂè≤‰∏ÄÂπ∂Êãâ‰∏ãÊù•ÔºåÊåáÂÆö fetch-depth Â∞±ËÉΩÂÅöÂà∞
        fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod
        # submodules: true  # Fetch submodules (true OR recursive)

    - name: TimeZone
      run: |
        echo "Before:"
        date --iso-8601=seconds
        ls -l /etc/localtime
        # Setting TimeZone
        sudo rm -f /etc/localtime
        sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
        echo "After:"
        ls -l /etc/localtime
        date --iso-8601=seconds
      shell: bash

    - name: Setup Python 3
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install pyimaging
      run: |
        pip install pyimaging
        pyimaging --help
      shell: bash
    
    - name: Font obfuscate
      run: |
        pip install -r ./utils/font_obfuscator/requirements.txt
        python ./utils/font_obfuscator/fontObfuscatorCli.py --input ./utils/font_obfuscator/input.ttf --output ./utils/font_obfuscator
        mv ./utils/font_obfuscator/output.ttf ./source/static/
      shell: bash

    - name: Copyright Add watermark to images
      run: |
        pyimaging watermark --imagedir "./source/_posts" --mark "yiyun" --space 200 --color "#b7ffab" --opacity 0.3 --size 20 --quality 80
        pyimaging blind-watermark --imagedir "./source/_posts" --mark-text "Powered by yiyun"
      shell: bash

    - name: Fix File Modify Date
      # run: |
          # ÂÆûÊµã: Êó†Êïà
      #   git ls-files | while read filepath; do touch -d "$(git log -1 --format='@%ct' $filepath)" "$filepath" && echo "Fixed: $filepath"; done
      # shell: bash
      run: |
        ./fix-date.ps1
        ./updated.ps1
      shell: pwsh

    - name: Use Node.js 18
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Pandoc
      run: |
        sudo apt-get install pandoc
        
    - name: Install Packages üîß 
      run: |
        npm config set registry https://registry.npmmirror.com
        npm install -g hexo-cli
        npm install
        # ‰ΩøÁî® npm ci ÈîÅÂÆöÁâàÊú¨, Á°Æ‰øù CI/CD ÁéØÂ¢É‰∏éÂºÄÂèëÁéØÂ¢É‰∏ÄËá¥, ÂêåÊó∂Á°Æ‰øù‰∏ç‰ºöÂá∫Áé∞ prompt
        npm ci
      shell: bash

    - name: Fix NexT sidebar
      id: fix-next-sidebar
      run: |
        # fixed: ‰ΩøÁî® hexo-blog-encrypt Âä†ÂØÜÂêé, ÂØºËá¥ NexT ‰æßËæπÁõÆÂΩï‰∏çÊòæÁ§∫
        cat './node_modules/hexo-theme-next/layout/_macro/sidebar.njk' | sed 's/toc(page.content/toc(page.origin/g' | tee './node_modules/hexo-theme-next/layout/_macro/sidebar.njk'
        CON=$(cat './node_modules/hexo-theme-next/layout/_macro/sidebar.njk')
        # Ëé∑ÂèñÂ≠óÁ¨¶‰∏≤ÈïøÂ∫¶
        CON=${#CON}
        echo "CON: ${CON}"
        echo "conclusion=${CON}" >> $GITHUB_OUTPUT
      shell: bash

    - name: ÊõøÊç¢ Markdown ‰∏≠ Êç¢Ë°åÁ¨¶
      run: |
        ./ÊõøÊç¢Êç¢Ë°åÁ¨¶.ps1
      shell: pwsh

    - name: javascript-obfuscator head.inject.js
      run: |
        npm i -g javascript-obfuscator
        javascript-obfuscator source/static/js/head.inject.js --output source/static/js/head.inject.js --compact true --self-defending false
        $oldStr=cat source/_data/head.njk
        $flagStr='// head.inject.js'
        $jsStr=cat source/static/js/head.inject.js
        $newStr=$oldStr -replace $flagStr,$jsStr
        echo $newStr
        $newStr>source/_data/head.njk
      shell: pwsh

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.100

    - name: Install tool coo
      run: | 
        # dotnet tool install -g coo
        # coo --version
        curl https://github.com/yiyungent/KnifeHub/releases/download/coo-v0.4.40/coo-v0.4.40-linux-x64.zip -o coo-v0.4.40-linux-x64.zip
        unzip coo-v0.4.40-linux-x64.zip
        mv ./coo-v0.4.40-linux-x64/* ./
        rmdir ./coo-v0.4.40-linux-x64/
        ./coo --version
      shell: bash
    
    - name: Markdown font obfuscate
      id: md-font-obfuscate
      run: |
        ./coo mdfont source/_posts ./utils/font_obfuscator/mapping.json
      shell: bash

    - name: Run tool rimg
      id: run-tool-rimg
      run: |
        # coo rimg source/_posts
        ./coo rimg source/_posts
      shell: bash
    
    - name: Build üîß 
      run: |
        hexo clean
        # Ëß£ÂÜ≥ Hexo ÊñáÁ´†Êó∂Èó¥‰∏∫ UTC+0, ËÄå‰∏çÊòØ UTC+08:00
        export TZ='Asia/Shanghai'
        hexo generate

    - name: Copy the pre-encrypted files to public-temp
      run: |
        #mkdir public-temp # Ê≥®ÊÑè: public-temp ÁõÆÂΩï‰∏çËÉΩÂ∑≤Â≠òÂú®, Âê¶Âàô‰ºöÂØºËá¥ public Êñá‰ª∂Â§πÂ§çÂà∂Ëøõ public-temp Êñá‰ª∂Â§πÂÜÖ, ‰∏çÁ¨¶ÂêàË¶ÅÊ±Ç
        cp -r public public-temp
      shell: bash

    - name: Hexo Encrypt
      run: |
        $hexoPassword="${{ secrets.HEXO_PASSWORD }}"
        ./password.ps1
      shell: pwsh

    - name: Build üîß 
      id: build-2
      run: |
        hexo clean
        # Ëß£ÂÜ≥ Hexo ÊñáÁ´†Êó∂Èó¥‰∏∫ UTC+0, ËÄå‰∏çÊòØ UTC+08:00
        export TZ='Asia/Shanghai'
        hexo generate
        # ÊµãËØï: È¶ñÈ°µÊòØÂê¶ÁîüÊàêÊàêÂäü
        CON=$(cat './public/index.html')
        # Ëé∑ÂèñÂ≠óÁ¨¶‰∏≤ÈïøÂ∫¶
        CON=${#CON}
        echo "CON: ${CON}"
        echo "conclusion=${CON}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Copy the file before encryption and overwrite the file after encryption
      run: |
        #cp -f public-temp/search.xml  public/search.xml
        cp -f public-temp/search.json  public/search.json
        cp -f public-temp/atom.xml  public/atom.xml
        cp -f public-temp/content.json  public/content.json
      shell: bash
    
    - name: Send Email
      if: ${{ steps.fix-next-sidebar.outputs.conclusion <= 100 || steps.build-2.outputs.conclusion <= 100 }}
      env:
        USER_EMAIL: ${{ secrets.USER_EMAIL }}
        USER_EMAIL_PASSWORD: ${{ secrets.USER_EMAIL_PASSWORD }}
      run: |
        python email_sending.py
      shell: bash

    - name: Deploy üöÄ
      id: deploy
      # Ê≠§ÁßçËØ≠Ê≥ï‰∏çÂêàÊ≥ï https://docs.github.com/en/actions/learn-github-actions/expressions
      # if: [ steps.fix-next-sidebar.outputs.conclusion -gt 100 ] && [ steps.build-2.outputs.conclusion -gt 100 ] 
      if: ${{ steps.fix-next-sidebar.outputs.conclusion > 100 && steps.build-2.outputs.conclusion > 100 }}
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        token: ${{ secrets.MY_GITHUB_TOKEN_ACTIONS }}
        branch: gh-pages
        folder: public
        repository-name: yiyungent/yiyungent.github.io
        git-config-name: "github-actions[bot]"
        git-config-email: "41898282+github-actions[bot]@users.noreply.github.com"

    - name: HTTP invoke deploy-github-pages.yml
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        OWNER="yiyungent" 
        REPO="yiyungent.github.io" 
        WORKFLOW_ID="deploy-github-pages.yml" 
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.MY_GITHUB_TOKEN_ACTIONS }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${OWNER}/${REPO}/actions/workflows/${WORKFLOW_ID}/dispatches \
          -d '{"ref":"master"}'
      shell: bash

    # - name: HTTP invoke pages-build-deployment
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y curl
    #     OWNER="yiyungent" 
    #     REPO="yiyungent.github.io" 
    #     # TODO: Not Found , "pages-build-deployment" ‰∏çÂ≠òÂú®, id ÂØπ‰∏ç‰∏ä
    #     WORKFLOW_ID="pages-build-deployment" 
    #     curl -L \
    #       -X POST \
    #       -H "Accept: application/vnd.github+json" \
    #       -H "Authorization: Bearer ${{ secrets.MY_GITHUB_TOKEN_ACTIONS }}" \
    #       -H "X-GitHub-Api-Version: 2022-11-28" \
    #       https://api.github.com/repos/${OWNER}/${REPO}/actions/workflows/${WORKFLOW_ID}/dispatches \
    #       -d '{"ref":"master"}'
    #   shell: bash

    - name: HTTP Re-run a workflow pages-build-deployment
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        OWNER="yiyungent" 
        REPO="yiyungent.github.io" 
        RUN_ID="4967907151" 
        # https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#re-run-a-workflow
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.MY_GITHUB_TOKEN_ACTIONS }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${OWNER}/${REPO}/actions/runs/${RUN_ID}/rerun
      shell: bash

    # - name: Upyun Refresh
    #   if: ${{ steps.fix-next-sidebar.outputs.conclusion > 100 && steps.build-2.outputs.conclusion > 100 }}
    #   uses: yiyungent/upyun-action@main
    #   with:
    #     # Âú® Settings->Secrets ÈÖçÁΩÆ UPYUN_USERNAME, UPYUN_PASSWORD
    #     upyun_username: ${{ secrets.UPYUN_USERNAME }}
    #     upyun_password: ${{ secrets.UPYUN_PASSWORD }}
    #     # Ë¶ÅÂà∑Êñ∞ÁöÑurl, ÊîØÊåÅÂåπÈÖçÁ¨¶ *, Â§ö‰∏™url‰∏≠Èó¥Áî® \n ÈöîÂºÄ
    #     refresh_cache_urls: "https://moeci.com/*\nhttps://moeci.com"
    #     upyun_debug: true

